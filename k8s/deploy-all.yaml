# Complete SafeVault with Monitoring Stack
# Apply with: kubectl apply -f deploy-all.yaml

# Persistent Storage
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: safevault-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
# Backend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: safevault-backend
  labels:
    app: safevault-backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: safevault-backend
  template:
    metadata:
      labels:
        app: safevault-backend
    spec:
      containers:
      - name: backend
        image: apurva1025/safevault-backend:optimized
        imagePullPolicy: Always
        env:
        - name: DATABASE_URL
          value: "sqlite:///./data/safevault.db"
        - name: SECRET_KEY
          value: "super-secret-key"
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: aws-credentials
              key: access-key-id
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: aws-credentials
              key: secret-access-key
        - name: AWS_REGION
          value: "eu-west-1"
        ports:
        - containerPort: 8000
        volumeMounts:
        - name: database-storage
          mountPath: /app/data
      volumes:
      - name: database-storage
        persistentVolumeClaim:
          claimName: safevault-pvc
---
# Backend Service
apiVersion: v1
kind: Service
metadata:
  name: safevault-backend-service
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8000"
    prometheus.io/path: "/metrics"
spec:
  selector:
    app: safevault-backend
  ports:
  - name: http
    port: 8000
    targetPort: 8000
  type: ClusterIP
---
# Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: safevault-frontend
  labels:
    app: safevault-frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: safevault-frontend
  template:
    metadata:
      labels:
        app: safevault-frontend
    spec:
      containers:
      - name: frontend
        image: apurva1025/safevault-frontend:fixed
        imagePullPolicy: Always
        ports:
        - containerPort: 80
---
# Frontend Service
apiVersion: v1
kind: Service
metadata:
  name: safevault-frontend-service
spec:
  selector:
    app: safevault-frontend
  ports:
  - port: 80
    targetPort: 80
  type: LoadBalancer
---
# Prometheus ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
    scrape_configs:
      - job_name: 'safevault-backend'
        static_configs:
          - targets: ['safevault-backend-service:8000']
        metrics_path: '/metrics'
        scrape_interval: 10s
---
# Prometheus Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  labels:
    app: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus:latest
        ports:
        - containerPort: 9090
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus/prometheus.yml
          subPath: prometheus.yml
        args:
        - '--config.file=/etc/prometheus/prometheus.yml'
        - '--storage.tsdb.path=/prometheus'
        - '--web.enable-lifecycle'
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
---
# Prometheus Service
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
spec:
  selector:
    app: prometheus
  ports:
  - port: 9090
    targetPort: 9090
  type: LoadBalancer
---
# Grafana ConfigMaps
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
data:
  prometheus.yml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://prometheus-service:9090
        isDefault: true
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards-config
data:
  dashboard.yml: |
    apiVersion: 1
    providers:
      - name: 'default'
        orgId: 1
        folder: ''
        type: file
        disableDeletion: false
        updateIntervalSeconds: 10
        allowUiUpdates: true
        options:
          path: /var/lib/grafana/dashboards
---
# Grafana Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  labels:
    app: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:latest
        ports:
        - containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: "admin"
        volumeMounts:
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
        - name: grafana-dashboards-config
          mountPath: /etc/grafana/provisioning/dashboards
      volumes:
      - name: grafana-datasources
        configMap:
          name: grafana-datasources
      - name: grafana-dashboards-config
        configMap:
          name: grafana-dashboards-config
---
# Grafana Service
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
spec:
  selector:
    app: grafana
  ports:
  - port: 3000
    targetPort: 3000
  type: LoadBalancer